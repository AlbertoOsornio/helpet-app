{"version":3,"sources":["components/genericComponents/Footer.js","components/genericComponents/Nav.js","pages/Home.js","Helper/Auth.js","components/ProtectedRoute.js","App.js","serviceWorker.js","index.js"],"names":["Footer","react_default","a","createElement","className","Date","getFullYear","Component","Nav","href","Home","genericComponents_Nav","genericComponents_Footer","Helper_Auth","Auth","Object","classCallCheck","this","authenticated","data","callback","localStorage","setItem","JSON","stringify","username","token","removeItem","getItem","ProtectedRoute","_ref","component","rest","objectWithoutProperties","react_router","assign","render","props","auth","isAuthenticated","to","pathname","state","from","location","App","react_router_dom","basename","exact","path","ProtectedRoute_ProtectedRoute","React","Boolean","window","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTAgBeA,0LAZP,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,eAEC,IAAIC,MAAOC,wBAPXC,cCSNC,0LAPP,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAW,eAAeK,KAAK,KAAlC,kBAJEF,cCUHG,MARf,WACI,OACIT,EAAAC,EAAAC,cAAA,WACKF,EAAAC,EAAAC,cAACQ,EAAD,MACDV,EAAAC,EAAAC,cAACS,EAAD,wBCmBGC,EAAA,eA1BX,SAAAC,IAAeC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GACXG,KAAKC,eAAgB,oDAEnBC,EAAMC,GAERC,aAAaC,QAAQ,YAAaC,KAAKC,UAAUL,EAAKM,WACtDJ,aAAaC,QAAQ,QAASH,EAAKO,OACnCT,KAAKC,eAAgB,EACrBE,mCAEGA,GAEHC,aAAaM,WAAW,aACxBN,aAAaM,WAAW,SACxBV,KAAKC,eAAgB,EACrBE,8CAQA,OAJGC,aAAaO,QAAQ,WAEpBX,KAAKC,eAAgB,GAElBD,KAAKC,wBCpBPW,EAAiB,SAAAC,GAGxB,IAFSvB,EAETuB,EAFFC,UACGC,EACDjB,OAAAkB,EAAA,EAAAlB,CAAAe,EAAA,eACF,OACI7B,EAAAC,EAAAC,cAAC+B,EAAA,EAADnB,OAAAoB,OAAA,GACIH,EADJ,CAEAI,OAAQ,SAAAC,GACJ,OAAGC,EAAKC,kBACGtC,EAAAC,EAAAC,cAACI,EAAc8B,GAGlBpC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CACAM,GAAI,CACAC,SAAU,IACVC,MAAO,CACHC,KAAMN,EAAMO,kBCYzBC,mLApBX,OACE5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAYC,SAAS,KACrB9C,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,KACAjC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAOc,OAAK,EAACC,KAAK,IAAIlB,UAAWrB,IACjCT,EAAAC,EAAAC,cAAC+C,EAAD,CAAgBF,OAAK,EAACC,KAAM,WAAWlB,UAAWrB,IAClDT,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAOc,OAAK,EAACC,KAAK,eAAelB,UAAW,kBAAM9B,EAAAC,EAAAC,cAAA,2BAClDF,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAOc,OAAK,EAACC,KAAK,oBAAoBlB,UAAW,kBAAM9B,EAAAC,EAAAC,cAAA,iCACvDF,EAAAC,EAAAC,cAAC+C,EAAD,CAAgBF,OAAK,EAACC,KAAK,WAAWlB,UAAWrB,IACjDT,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAOc,OAAK,EAACC,KAAK,SAASlB,UAAWrB,IACtCT,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAOc,OAAK,EAACC,KAAK,IAAIlB,UAAW,iBAAM,6BAf3BoB,IAAM5C,WCIJ6C,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASC,MACvB,2DCZNC,IAASpB,OAAOnC,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5af56b67.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport './styles/footer.css';\nclass Footer extends Component {\n    render() {\n        return(\n            <footer className=\"footer\">\n                <div className=\"container\">\n                    <span className=\"text-muted\">\n                    Helpet &#169;\n                    {new Date().getFullYear()}\n                    </span>\n                </div>\n            </footer>\n        )\n    }\n}\nexport default Footer","import React, {Component} from 'react'\nimport './styles/nav.css';\nclass Nav extends Component {\n    render() {\n        return (\n            <nav className=\"navbar navbar-light bg-light\">\n                <a className= \"navbar-brand\" href=\"#\">Navbar</a>\n            </nav>\n        )\n    }\n}\nexport default Nav","import React from 'react'\nimport Footer from '../components/genericComponents/Footer'\nimport Nav from '../components/genericComponents/Nav'\n\nfunction Home () {\n    return(\n        <div>\n             <Nav />\n            <Footer />\n        </div>\n    )\n}\nexport default Home","class Auth {\n    constructor() {\n        this.authenticated = false\n    }\n    login(data, callback) {\n        // fetch user, set JWT, user-id;\n        localStorage.setItem('user-data', JSON.stringify(data.username))\n        localStorage.setItem('token', data.token)\n        this.authenticated = true;\n        callback() // callback it's a function\n    }\n    logout(callback) {\n        // clean storage, erase JWT, erase user data.\n        localStorage.removeItem('user-data')\n        localStorage.removeItem('token')\n        this.authenticated = false;\n        callback()\n    }\n    isAuthenticated(){\n        // validate if the local storage data is available.\n        if(localStorage.getItem('token')){\n            // API call verify token\n            this.authenticated = true;\n        }\n        return this.authenticated;\n    }\n}\nexport default new Auth()","import React from 'react'\nimport {Route, Redirect} from 'react-router-dom'\nimport auth from '../Helper/Auth'\n\nexport const ProtectedRoute = ({\n    component: Component,\n    ...rest\n}) => {\n    return(\n        <Route\n        {...rest}\n        render={props =>{\n            if(auth.isAuthenticated()){\n                return <Component {...props} />;\n            }else{\n                return(\n                    <Redirect \n                    to={{\n                        pathname: \"/\",\n                        state: {\n                            from: props.location\n                        }\n                    }\n                    }/>\n                );\n            }\n        }}\n        />\n    );\n};","import React from 'react'\nimport {HashRouter, Route, Switch} from 'react-router-dom'\nimport Home from './pages/Home'\n\nimport './App.css'\nimport {ProtectedRoute} from './components/ProtectedRoute'\n\n\nclass App extends React.Component {\n \n  render () {\n\n    return(\n      <HashRouter basename=\"/\">\n      <div>\n      \n      <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <ProtectedRoute exact path =\"/mytasks\" component={Home} />\n      <Route exact path=\"/mytasks/add\" component={() => <h1>Add a task</h1>} />\n      <Route exact path=\"/mytasks/view/:id\" component={() => <h1>A View task page</h1>} />\n      <ProtectedRoute exact path=\"/my-info\" component={Home} />\n      <Route exact path=\"/login\" component={Home} />\n      <Route exact path=\"*\" component={() => \"404 NOT FOUND\"} />\n      </Switch>\n      \n      </div>\n      </HashRouter>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}